
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/xavierkauffmann/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/xavierkauffmann/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/Users/xavierkauffmann/opt/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/Users/xavierkauffmann/opt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# disable base prompt
#conda config --set auto_activate_base False
# <<< conda initialize <<<

# first time for prezto
# in shell
#git clone --recursive https://github.com/sorin-ionescu/prezto.git "${ZDOTDIR:-$HOME}/.zprezto"
#
#setopt EXTENDED_GLOB
#for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
#  ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
#done

#----------------------------
# Prompt
#----------------------------

source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
#autoload -U promptinit; promptinit
prompt pure

# Source stuff
. /opt/homebrew/etc/profile.d/z.sh

#----------------------------
# History
#----------------------------
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt append_history
setopt hist_expire_dups_first
setopt hist_ignore_space
setopt inc_append_history
#setopt share_history

setopt autocd extendedglob

# remove file exist warning
setopt clobber

unsetopt correct

#-----------------------------
# Editor
#-----------------------------
# Default editor settings
export EDITOR=/opt/homebrew/bin/nvim
export VISUAL=/opt/homebrew/bin/nvim
export KEYTIMEOUT=1
KEYTIMEOUT=1

#-----------------------------
# Dircolors
#-----------------------------
# LS_COLORS='rs=0:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:tw=30;42:ow=34;42:st=37;44:ex=01;32:';
# export LS_COLORS

# faster
#xset -b
# xset r rate 330 75
#xset r rate 210 30

#------------------------------
# Keybindings
#------------------------------
#https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/key-bindings.zsh

# http://stackoverflow.com/questions/2640141/is-there-a-way-to-switch-bash-or-zsh-from-emacs-mode-to-vi-mode-with-a-keystroke

# set -o emacs
# bind '"\ee": vi-editing-mode'
# set -o vi
# bind '"\ee": emacs-editing-mode'
# (set -o | grep emacs.*on >/dev/null 2>&1 && echo E || echo V)


# http://unix.stackexchange.com/questions/112406/how-do-i-switch-to-vi-editing-mode-in-readline
# https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/key-bindings.zsh

####################################KEYS

# bindkey -v
typeset -g -A key
bindkey -e
bindkey '\e[3~' delete-char
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line
bindkey '\e[2~' overwrite-mode
bindkey '^?' backward-delete-char
bindkey '^[[1~' beginning-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[3~' delete-char
bindkey '^[[4~' end-of-line
bindkey '^[[6~' down-line-or-history
bindkey '^[[A' up-line-or-search
bindkey '^[[D' backward-char
bindkey '^[[B' down-line-or-search
bindkey '^[[C' forward-char 
## for rxvt
bindkey "\e[8~" end-of-line
bindkey "\e[7~" beginning-of-line
## for gnome-terminal
#bindkey "\eOH" beginning-of-line
#bindkey "\eOF" end-of-line
# bindkey "${terminfo[khome]}" beginning-of-line
# bindkey "${terminfo[kend]}" end-of-line
bindkey "\e[8~" end-of-line
bindkey "\e[7~" beginning-of-line
# key[Home]='^[[7~'
bindkey '^[[7~' beginning-of-line
# key[End]='^[[8~'
bindkey '^[[8~' end-of-line

# touchcursor
# bindkey "^i" beginning-of-line
# bindkey "^o" end-of-line

# plus
# bindkey '^R' history-incremental-pattern-search-backward
bindkey '\e.' insert-last-word
#bindkey '\ef' emacs-forward-word
#bindkey '^[f' forward-word
#bindkey '^[d' kill-word
# bindkey "\e\e" kill-line

bindkey "\e\e" kill-whole-line
bindkey "^[^[" kill-whole-line
# Edit options before rerunning previous command, eg: ls a b c -> ls -al a b c
#bind '"\e-":"\C-p\C-a\M-f "'

# Move to where the arguments belong.
after-first-word() {
  zle beginning-of-line
  zle forward-word
}
zle -N after-first-word
#bindkey "^X1" after-first-word
bindkey "\eo" after-first-word

# ---- needed?

# key bindings
#http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets
#http://chneukirchen.org/blog/archive/2011/02/10-more-zsh-tricks-you-may-not-know.html
#http://chneukirchen.org/blog/archive/2013/03/10-fresh-zsh-tricks-you-may-not-know.html
bindkey "e[1~" beginning-of-line
bindkey "e[4~" end-of-line
bindkey "e[5~" beginning-of-history
bindkey "e[6~" end-of-history
bindkey "e[3~" delete-char
bindkey "e[2~" quoted-insert
bindkey "e[5C" forward-word
bindkey "eOc" emacs-forward-word
bindkey "e[5D" backward-word
bindkey "e[5D" backward-word
bindkey "eOd" emacs-backward-word
bindkey "ee[C" forward-word
bindkey "ee[D" backward-word
bindkey "^H" backward-delete-word
# for rxvt
bindkey "e[8~" end-of-line
bindkey "e[7~" beginning-of-line
# for non RH/Debian xterm, can't hurt for RH/DEbian xterm
bindkey "eOH" beginning-of-line
bindkey "eOF" end-of-line
# for freebsd console
bindkey "e[H" beginning-of-line
bindkey "e[F" end-of-line
# completion in the middle of a line
bindkey '^i' expand-or-complete-prefix

bindkey -M emacs '^[[33~'    backward-kill-word

# fix zsh annoying history behavior
h() { if [ -z "$*" ]; then history 1; else history 1 | egrep "$@"; fi; }

zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey '\eOA' up-line-or-beginning-search
bindkey '\e[A' up-line-or-beginning-search
bindkey '\eOB' down-line-or-beginning-search
bindkey '\e[B' down-line-or-beginning-search

autoload -Uz up-line-or-beginning-search
autoload -Uz down-line-or-beginning-search

WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# separators
# autoload -U select-word-style
# select-word-style bash

# backward-kill-dir () {
#     local WORDCHARS=${WORDCHARS/\/}
#     zle backward-kill-word
# }
# zle -N backward-kill-dir
# bindkey '^[^?' backward-kill-dir

# general https://bbs.archlinux.org/viewtopic.php?id=26110

## annoyances

#I don't like this feature. I think no one does. It corrects you, when you are trying to create new files, for example.
unsetopt correctall

# bind add

zstyle ':completion:*' rehash true

# zsh do not trust cache and recompute completion
zstyle ":completion:*:commands" rehash 1

# #- complete pacman-color the same as pacman
# compdef _pacman pacman-color=pacman

#------------------------------
# Window title
#------------------------------
# case $TERM in
#   termite|*xterm*|rxvt|rxvt-unicode|rxvt-256color|rxvt-unicode-256color|(dt|k|E)term)
#     precmd () {
#       vcs_info
#       print -Pn "\e]0;[%n@%M][%~]%#\a"
#     } 
#     preexec () { print -Pn "\e]0;[%n@%M][%~]%# ($1)\a" }
#     ;;
#   screen|screen-256color)
#     precmd () { 
#       vcs_info
#       print -Pn "\e]83;title \"$1\"\a" 
#       print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~]\a" 
#     }
#     preexec () { 
#       print -Pn "\e]83;title \"$1\"\a" 
#       print -Pn "\e]0;$TERM - (%L) [%n@%M]%# [%~] ($1)\a" 
#     }
#     ;; 
# esac


#------------------------------
# Alias
#------------------------------
alias updatedb='sudo /usr/libexec/locate.updatedb'

# # Source additional files; alias + local non-git versions of bashrc/alias
if [ -f $HOME/.alias ]; then source $HOME/.alias; fi
# if [ -f $HOME/.bashrc.local ]; then source $HOME/.bashrc.local; fi
# if [ -f $HOME/.alias.local ]; then source $HOME/.alias.local; fi

# autoload -U colors zsh/terminfo
# colors

# autoload -Uz vcs_info
# zstyle ':vcs_info:*' enable git hg
# zstyle ':vcs_info:*' check-for-changes true
# zstyle ':vcs_info:git*' formats "%{${fg[cyan]}%}[%{${fg[green]}%}%s%{${fg[cyan]}%}][%{${fg[blue]}%}%r/%S%%{${fg[cyan]}%}][%{${fg[blue]}%}%b%{${fg[yellow]}%}%m%u%c%{${fg[cyan]}%}]%{$reset_color%}"

# setprompt() {
#   # load some modules
#   setopt prompt_subst
#
#   # make some aliases for the colours: (coud use normal escap.seq's too)
#   for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
#     eval PR_$color='%{$fg[${(L)color}]%}'
#   done
#   PR_NO_COLOR="%{$terminfo[sgr0]%}"
#
#   # Check the UID
#   if [[ $UID -ge 1000 ]]; then # normal user
#     eval PR_USER='${PR_GREEN}%n${PR_NO_COLOR}'
#   elif [[ $UID -eq 0 ]]; then # root
#     eval PR_USER='${PR_RED}%n${PR_NO_COLOR}'
#     eval PR_USER_OP='${PR_RED}%#${PR_NO_COLOR}'
#   fi
#
#   # Check if we are on SSH or not
#   if [[ -n "$SSH_CLIENT"  ||  -n "$SSH2_CLIENT" ]]; then 
#     eval PR_HOST='${PR_YELLOW}%M${PR_NO_COLOR}' #SSH
#   else 
#     eval PR_HOST='${PR_GREEN}%M${PR_NO_COLOR}' # no SSH
#   fi
#   # set the prompt
#   PS1=$'${PR_CYAN}[${PR_USER}${PR_CYAN}@${PR_HOST}${PR_CYAN}][${PR_BLUE}%~${PR_CYAN}]${PR_USER_OP} '
#   PS2=$'%_>'
#   RPROMPT=$'${vcs_info_msg_0_}'
# }
# setprompt

#-------------------------------
# Plugins
#-------------------------------
# setxkbmap fr -option "caps:escape"

# source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# alias fuck='TF_CMD=$(TF_ALIAS=fuck PYTHONIOENCODING=utf-8 TF_SHELL_ALIASES=$(alias) thefuck $(fc -ln -1 | tail -n 1)) && eval $TF_CMD && print -s $TF_CMD'


###########################PLUGINS

## fasd
#eval "$(fasd --init auto)"
# # eval "$(fasd --init posix-alias zsh-hook)"
#unalias s
#bindkey '^X^A' fasd-complete    # C-x C-a to do fasd-complete (fils and directories)

#source /usr/share/fzf/completion.zsh
#source /usr/share/fzf/key-bindings.zsh

# source /etc/bash_completion.d/climate_completion

# zsh profiling
# just execute 'ZSH_PROFILE_RC=1 zsh' and run 'zprof' to get the details
# if [[ $ZSH_PROFILE_RC -gt 0 ]] ; then
    # zmodload zsh/zprof
# fi

# source ~/.zsh_funcs
# source ~/.zsh_test


# zplug

export ZPLUG_HOME=/opt/homebrew/opt/zplug
source $ZPLUG_HOME/init.zsh

## functions
# vf - fuzzy open with vim from anywhere
# ex: vf word1 word2 ... (even part of a file name)
# zsh autoload function
vf() {
  if [[ -n $@ ]]
  then
    local files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

    if [[ -n $files ]]
    then
      vim -- $files
      print -l $files[1]
    fi
    return 0
  else
    local vfile=$(locate / | fzf)
    if [[ -n $vfile ]]
    then
      vim $vfile
    fi
  fi
}

# same with cd
cf() {
  if [[ -n $@ ]]
  then
    local files=(${(f)"$(locate -Ai -0 $@ | grep -z -vE '~$' | fzf --read0 -0 -1 -m)"})

    if [[ -n $files ]]
    then
      cd -- $files
      print -l $files[1]
    fi
    return 0
  else
    local vfile=$(locate / | fzf)
    if [[ -n $vfile ]]
    then
      cd $vfile
    fi
  fi
}

ctrlp() {
  local selected
  if selected=$(find . -type f | grep -v .git | grep -v node_modules | fzf -q "$LBUFFER"); then
    LBUFFER=$selected
  fi  
  zle redisplay
}

# option-g to find files and put the result in command
zle -N ctrlp
bindkey "\eg" ctrlp

#https://www.reddit.com/r/commandline/comments/cwrioy/for_fasd_fzf_users_universal_v_vd_and_z_functions/

# env variables
# export GOPATH=/home/xavier/Projects/gocode
#export PATH=$PATH:/home/x/go/bin
export PATH=$PATH:/home/x/go/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin

# for x86 intel applications and homebrew
export PATH=$HOME/bin:/usr/local/bin:$PATH

# add XKT the scripts from josh
export PATH=$PATH:::
::
::::
<BS>

# source ~/.zsh_plugins

# source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# bindkey "Ã¹" autosuggest-execute
# bindkey '^\n' autosuggest-execute
bindkey 'ù' autosuggest-execute
# bindkey "Ã " backward-kill-word

#fancy-ctrl-z () {
#  if [[ $#BUFFER -eq 0 ]]; then
#   fg
#   zle redisplay
#  else
#   zle push-input
#   zle clear-screen
#  fi
#}
#zle -N fancy-ctrl-z
#bindkey '^Z' fancy-ctrl-z

finddots () {
find . -type f -maxdepth 1 | grep -e "^./\."
}

dots () {
vim $(finddots | fzf )
}

vv () {
vim $(fasd -f | grep -oh -e "\/.*" | fzf)
}

fv () {
vim $(fd | fzf)
}

n ()
{
    export EDITOR=vim
    export VISUAL=vim

    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn -e "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

mcd() {
    mkdir -p "$1" && cd "$1";
}

ad() {
    mkdir -p "$1"
}

brewsave () {
    brew list > .brew.list
}
# xargs brew install < .brew.list

dotpush () {
    chezmoi re-add
}

# pyfunky
source /opt/homebrew/lib/python3.9/site-packages/scripts/shell/funky.sh


# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_ALT_C_COMMAND='fd --type directory'

